openapi: 3.0.0
info:
  description: This is the Training Server of the IT Academy. Management of departments and employees. 
  version: "1.0.0"
  title: Swagger Corporation
  termsOfService: 'http://swagger.io/terms/'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ITAcademy85/Corporation/1.0.0
  - url: https://app-corporation-docker.herokuapp.com/api/v1
  

tags:
  - name: User
    description: Operations about User
  - name: Department
    description: Operations about Department
  - name: Employee
    description: Operations about Employee
paths:
  /user/login:
    post:
      tags:
        - User
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - password
              properties:
                userName:
                  type: string
                  example: Admin
                password:
                  type: string
                  example: 0c7045ec9abc578394af1898
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/securitySchemes/bearerAuth'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not found"
        '500':
          description: Unexpected error

  /user:
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - password
              properties:
                userName:
                  type: string
                  example: Admin
                password:
                  type: string
                  example: 0c7045ec9abc578394af1898

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "The User with this User Name already exists."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
  /department:
    get:
      tags:
        - Department
      summary: Get all departmen
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  count:
                    type: number
                    example: 1
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                          example: 625e83c057969f98f917a2e7
                        name:
                          type: string
                          example: General Management
                        description:
                          type: string
                          example: Responsible for the management of the company
                        created_at:
                          type: string
                          format: date
                        updated_at:
                          type: string
                          format: date
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
    post:
      tags:
        - Department
      summary: Create departmen
      requestBody:
        required: true
        description: Created Department object
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                  example: General Management
                description:
                  type: string
                  example: Responsible for the management of the company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  _id:
                    type: integer
                    format: int64
                    example: 625e83c057969f98f917a2e7
                  name:
                    type: string
                    example: General Management
                  description:
                    type: string
                    example: Responsible for the management of the company
                  employees:
                    type: array
                    example: []
                  created_at:
                    type: string
                    format: date
                  updated_at:
                    type: string
                    format: date
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "The department with this Name already exists."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
  /department/{id}:
    get:
      tags:
        - Department
      summary: Get departmen by id
      parameters:
        - name: id
          in: path
          description: ID of department to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "The department with this ID was not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
    delete:
      tags:
        - Department
      summary: Delete departmen by id
      parameters:
        - name: id
          in: path
          description: The department id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Department with this ID has been deleted.'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
    patch:
      tags:
        - Department
      summary: Change departmen by id
      parameters:
        - name: id
          in: path
          description: The department id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Change Department object
        content:
          application/json:
            schema:
              type: object
              required:
                - description
              properties:
                description:
                  type: string
                  example: Responsible for the management of the company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
  /department?name:
    get:
      tags:
        - Department
      summary: Get departmen by name
      parameters:      
        - name: name
          in: query
          description: The employee id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  count:
                    type: number
                    example: 1
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                          example: 625e83c057969f98f917a2e7
                        name:
                          type: string
                          example: General Management
                        description:
                          type: string
                          example: Responsible for the management of the company
                        created_at:
                          type: string
                          format: date
                        updated_at:
                          type: string
                          format: date
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "Department with the name General Management not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []        
  /department?offset&limit:
    get:
      tags:
        - Department
      summary: Get departmen by limit
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  count:
                    type: number
                    example: 1
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                          example: 625e83c057969f98f917a2e7
                        name:
                          type: string
                          example: General Management
                        description:
                          type: string
                          example: Responsible for the management of the company
                        created_at:
                          type: string
                          format: date
                        updated_at:
                          type: string
                          format: date
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "There are no existing departments."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []        

  /employee:
    post:
      tags:
        - Employee
      summary: Create employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - email
                - firstName
                - lastName
              properties:
                userName:
                  type: string
                  example: Sampson
                email:
                  type: string
                  example: employee@webui.com
                firstName:
                  type: string
                  example: Harry
                lastName:
                  type: string
                  example: Daines
        description: Created employee object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Employee'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "The department with this ID was not found."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
  /employee/{id}:
    get:
      tags:
        - Employee
      summary: Get employee by id
      parameters:
        - name: id
          in: path
          description: ID of department to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The employee by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "The employee with this ID was not found."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
    patch:
      tags:
        - Employee
      summary: Change employee by id
      parameters:
        - name: id
          in: path
          description: The employee id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: employee@webui.com
        description: Created employee object
      responses:
        '200':
          description: The employee by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "The employee with this Email already exists."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
  /employee/{id}/department/{departmentId}:
    delete:
      tags:
        - Employee
      summary: Delete employee by id
      parameters:
        - name: id
          in: path
          description: The employee id
          required: true
          schema:
            type: string
        - name: departmentId
          in: path
          description: The department id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Employee with this ID has been deleted.'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "The Employee with this ID was not found."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "User not authorized."
        '500':
          description: Unexpected error
      security:
        - bearerAuth: []
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MjVlNmU5YWEzNzY5ODkyNTE4MDhhM2MiLCJpYXQiOjE2NTE5OTczMDAsImV4cCI6MTY1MjA4MzcwMH0.RRomWynP-R2XBfgelgBI4X0M7kDsUq2AFw93s0UKi30"
  schemas:
    User:
      type: object
      required:
        - userName
        - password
      properties:
        _id:
          type: integer
          format: int64
          example: 6277a17db8a0153b875610ab
        userName:
          type: string
          example: Admin
        password:
          type: string
          example: 0c7045ec9abc578394af1898
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date
    Department:
      type: object
      required:
        - name
        - description
      properties:
        _id:
          type: integer
          format: int64
          example: 6260047cbb20b3d25e0b8411
        name:
          type: string
          example: General Management
        description:
          type: string
          example: Responsible for the management of the company
        employees:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date
    Employee:
      type: object
      required:
        - userName
        - email
        - firstName
        - lastName
      properties:
        _id:
          type: string
          example: 6260022775f6f63bcdf21cd8
        userName:
          type: string
          example: Sampson
        email:
          type: string
          example: employee@webui.com
        firstName:
          type: string
          example: Harry
        lastName:
          type: string
          example: Daines
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date